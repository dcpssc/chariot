#!/usr/bin/env python

__author__ = "Subhav Pradhan"

import sys, getopt
import socket, zmq, json
from chariot_runtime_libs import get_node_address, mongo_connect, handle_action

def print_usage():
    print "USAGE:"
    print "DeploymentManager --nodeName <node name> --mongoServer <mongo server address> [--simulateDM]"

def main():
    global SIMULATE_DM_ACTIONS
    global NODE_NAME
    global ZMQ_PORT

    SIMULATE_DM_ACTIONS = False
    NODE_NAME = ""
    ZMQ_PORT = 8000

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hnms",
                                   ["help", "nodeName=", "mongoServer=", "simulateDM"])
    except getopt.GetoptError:
        print "Cannot retrieve passed parameters."
        print_usage()
        sys.exit()

    mongoServer = None

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print_usage()
            sys.exit()
        elif opt in ("-n", "--nodeName"):
            print "Node name:", arg
            NODE_NAME = arg
        elif opt in ("-m", "--mongoServer"):
            print "Mongo server address:", arg
            mongoServer = arg
        elif opt in ("-s", "--simulateDM"):
            print "Simulating DM Actions"
            SIMULATE_DM_ACTIONS = True
        else:
            print "Invalid command line argument."
            print_usage()
            sys.exit()

    # If no node name given then use hostname.
    if NODE_NAME == "":
        NODE_NAME = socket.gethostname()
        print "Using node name:", NODE_NAME

    # If no mongoServer given then use default.
    if (mongoServer is None):
        #mongoServer = "mongo"
        mongoServer = "localhost"
        print "Using mongo server: ", mongoServer

    client = None
    db = None

    print "Connecting to mongo server:", mongoServer
    client = mongo_connect(mongoServer)

    if client is not None:
        if "ConfigSpace" in client.database_names():
            db = client["ConfigSpace"]
        else:
            print "ConfigSpace collection does not exists in database"
            sys.exit()
    else:
        print "MongoClient not constructed correctly"
        sys.exit()

    # Creating ZeroMQ context and server socket.
    zmq_context = zmq.Context()
    zmq_socket = zmq_context.socket(zmq.REP)

    # Get IP and port of host.
    addr, port = get_node_address(db, NODE_NAME)

    # Connect to given address(stored in database) or default port.
    if (addr is not None and port is not None):
        print "Using address: ", str(addr), " and port: ", int(port)
        t = zmq_socket.bind("tcp://%s:%d"%(str(addr), int(port)))
        print t
    elif (addr is not None and port is None):
        # If port is none, use default ZMQ_PORT.
        print "Using address: ", str(addr)
        zmq_socket.bind("tcp://%s:%d"%(str(addr),ZMQ_PORT))

    while True:
        # Receive action, which is a JSON document.
        print "Waiting for deployment action"
        action = zmq_socket.recv()
        zmq_socket.send("Received")
        action_json = json.loads(action)
        print "Received new deployment action: ", action_json["action"], " for process: ", action_json["process"]
        handle_action (db, json.loads(action))

if __name__ == '__main__':
    main()

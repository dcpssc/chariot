#!/usr/bin/env python

__author__ = "Subhav Pradhan"

import os, sys
import argparse, ConfigParser
import socket, zmq, json
from chariot_runtime_libs import get_node_address, mongo_connect, handle_action

def main():
    # Default zeromq port.
    ZMQ_PORT = 8000

    argParser = argparse.ArgumentParser()
    parserGroup = argParser.add_mutually_exclusive_group()
    
    parserGroup.add_argument("-c", 
                             "--configFile", 
                             help="CHARIOT configuration file to use")
    
    parserGroup.add_argument("-s", 
                             "--simulatedDMName", 
                             help="Indicates simulated Deployment Manager (DM). 
                                   Value represents unique DM/node name.")

    args = argParser.parse_args()

    if (args.simulatedDMName is None and args.configFile is None):
        argParser.print_help()
        argParser.exit()

    nodeName = None
    simulateDMActions = False
    mongoServer = None

    if (args.simulatedDMName is not None):
        print "Simulating Deployment Manager with name: ", args.simulatedDMName
        simulateDMActions = True
        nodeName = args.simulateDMName
        mongoServer = "localhost"
    else:
        print "Non simulated usage so using configuration in: ", args.configFile
        if (os.path.isfile(args.configFile)):
            configParser = ConfigParser.ConfigParser()
            configParser.read(args.configFile)
            
            nodeName = configParser.get("Base", "NodeName")
            mongoServer = configParser.get("Services", "MongoServer")
        else:
            print "Error: Cannot find configuration file."
            sys.exit()

    # If no node name given then use hostname.
    if nodeName == "":
        nodeName = socket.gethostname()
        print "Node name not provided. Using node name:", nodeName

    # If no mongoServer given then use default.
    if (mongoServer is None):
        mongoServer = "localhost"
        print "No mongo server provided. Using mongo server: ", mongoServer

    client = None
    db = None

    print "Connecting to mongo server:", mongoServer
    client = mongo_connect(mongoServer)

    if client is not None:
        db = client["ConfigSpace"]
    else:
        print "MongoClient not constructed correctly"
        sys.exit()

    # Creating ZeroMQ context and server socket.
    zmq_context = zmq.Context()
    zmq_socket = zmq_context.socket(zmq.REP)

    # Get IP and port of host.
    addr, port = get_node_address(db, node_name)

    # Connect to given address(stored in database) or default port.
    if (addr is not None and port is not None):
        print "Using address: ", str(addr), " and port: ", int(port)
        zmq_socket.bind("tcp://%s:%d"%(str(addr), int(port)))
    elif (addr is not None and port is None):
        # If port is none, use default ZMQ_PORT.
        print "Using address: ", str(addr)
        zmq_socket.bind("tcp://%s:%d"%(str(addr),ZMQ_PORT))

    while True:
        # Receive action, which is a JSON document.
        print "Waiting for deployment action"
        action = zmq_socket.recv()
        zmq_socket.send("Received")
        action_json = json.loads(action)
        print "Received deployment action: ", action_json["action"], " for process: ", action_json["process"]
        handle_action (db, json.loads(action), simulateDMActions, nodeName)

if __name__ == '__main__':
    main()

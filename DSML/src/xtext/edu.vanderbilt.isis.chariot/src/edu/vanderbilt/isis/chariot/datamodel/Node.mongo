import org.bson.types.ObjectId
import com.mongodb.DB
import com.mongodb.DBObject
import com.mongodb.DBCollection
import edu.vanderbilt.isis.chariot.datamodel.Status
import java.util.logging.Logger
import edu.vanderbilt.isis.chariot.datamodel.TimeUnit

package edu.vanderbilt.isis.chariot.datamodel.Node {
	DM_Node {
		ObjectId _id
		String name
		double reliability
		DM_Lifetime {
			double lifetime
			String unit
			
			/*
			 * 
			 */
			void setUnit (TimeUnit unit) {
				this.unit = unit.toString()
			}
		} lifetime
		String nodeTemplate
		String status
		DM_Interface* interfaces
		DM_Process* processes
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.reliability = 0.0
			this.lifetime = new DM_Lifetime() => [
				setLifetime (0.0)
				setUnit ("")
			]
			this.nodeTemplate = new String()
			this.status = new String()
			this.getInterfaces()	// This initializes interfaces.
			this.getProcesses()		// This initializes processes.
		}
		
		/*
		 * 
		 */
		void setLifetime ((DM_Lifetime)=>void initializer) {
			this.lifetime = new DM_Lifetime => initializer
		}
		
		/*
		 * 
		 */
		void setStatus(Status status) {
			this.status = status.toString()
		}
		
		/*
		 * 
		 */
		void addInterface ((DM_Interface)=>void initializer) {
			//val LOGGER = Logger.getLogger("DM_NODE")
			val DM_Interface interfaceToAdd = new DM_Interface => initializer
			this.interfaces.add (interfaceToAdd)	//@TODO: Add code to check for duplicate.
			/*val List<String> tmp = this.interfaces.map[name]
			if (!tmp.contains (interfaceToAdd.name))
				this.interfaces.add (interfaceToAdd)
			else
				LOGGER.info (interfaceToAdd.getName() + 
					" interface already exists in node " + this.name)*/
		}
		
		/*
		 * 
		 */
		void addProcess ((DM_Process)=>void initializer) {
			//val LOGGER = Logger.getLogger("DM_NODE")
			val DM_Process processToAdd = new DM_Process => initializer
			this.processes.add (processToAdd)	//@TODO: Add code to check for duplicate.
			/*val List<String> tmp = this.processes.map[name]
			if (!tmp.contains (processesToAdd.name))
				this.processes.add (processToAdd)
			else
				LOGGER.info (processToAdd.getName() + 
					" process already exists in node " + this.name)*/
		}
		
		/*
		 * 
		 */
		void insert (DB database) {
			val LOGGER = Logger.getLogger("DM_NODE")
			
			val dbCollection = database.getCollection('LiveSystem')
			
			// Check if already exists. Store only if no existing
			// nodes has the same name.
			val result = dbCollection.findOne((new DM_Node => [
				name = this.name
			]).getDbObject())
				
			if (result == null) {
				dbCollection.save(this.getDbObject())
				LOGGER.info (this.name + 
					" node added to database")
			}
			else {
				LOGGER.info (this.name + 
					" node already exists. Will NOT be updated.")
					
				//this.update(result, dbCollection)
			}
		}
		
		/*
		 * 
		 */
		void update (DBObject objectToUpdate, DBCollection targetCollection) {
			val LOGGER = Logger.getLogger("DM_NODE")
			
		 	// Delete existing object and save current version.
		 	targetCollection.remove(objectToUpdate)
		 	targetCollection.save(this.getDbObject())
		 	
		 	LOGGER.info (this.name + 
				" node has been updated.")
		 }
	}
	
	DM_Interface {
		String name
		String address
		String network
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.address = new String()
			this.network = new String()
		}
	}
	
	DM_Process {
		String name
		int pid
		String status
		DM_Component* components
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.pid = 0
			this.status = new String()
			this.getComponents()	// This initializes components.
		}
		
		/*
		 * 
		 */
		void setStatus(Status status) {
			this.status = status.toString()
		}
		
		/*
		 * 
		 */
		void addComponent ((DM_Component)=>void initializer) {
			//val LOGGER = Logger.getLogger("DM_NODE")
			val DM_Component componentToAdd = new DM_Component => initializer
			this.components.add (componentToAdd)	//@TODO: Add code to check for duplicate.
			/*val List<String> tmp = this.components.map[name]
			if (!tmp.contains (componentToAdd.name))
				this.components.add (componentToAdd)
			else
				LOGGER.info (componentToAdd.getName() + 
					" component already exists in process " + this.name)*/
		}
	}
	
	DM_Component {
		String name
		String status
		String type
		String mode
		String functionalityInstance
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.status = new String()
			this.type = new String()
			this.mode = new String()
			this.functionalityInstance = new String()
		}
		
		/*
		 * 
		 */
		void setStatus(Status status) {
			this.status = status.toString()
		}
	}
}
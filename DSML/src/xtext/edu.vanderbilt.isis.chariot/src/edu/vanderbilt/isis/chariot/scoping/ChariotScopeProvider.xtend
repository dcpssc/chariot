/*
 * generated by Xtext
 */
package edu.vanderbilt.isis.chariot.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference

import java.util.ArrayList
import edu.vanderbilt.isis.chariot.chariot.FunctionalityParam
import org.eclipse.xtext.scoping.Scopes


//import edu.vanderbilt.isis.chariot.chariot.FunctionalityUsedPort
//import edu.vanderbilt.isis.chariot.chariot.ProvidedFunctionality
//import edu.vanderbilt.isis.chariot.chariot.ActionMessageInParameter
//import edu.vanderbilt.isis.chariot.chariot.ActionMessageOutParameter
//import edu.vanderbilt.isis.chariot.chariot.StartAction
//import edu.vanderbilt.isis.chariot.chariot.ActivityInParameter
//import edu.vanderbilt.isis.chariot.chariot.ActivityOutParameter


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 * 
 */
public class ChariotScopeProvider extends AbstractDeclarativeScopeProvider {


//    def IScope scope_ActionMessageInParameter_activityParam(ActionMessageInParameter spec, EReference ref) {
//		val activity = (spec.eContainer as StartAction).activity;
//		if (activity != null) {
//			Scopes::scopeFor(activity.params.filter(typeof(ActivityInParameter)))
//		} else {
//			IScope::NULLSCOPE
//
//		}
//	}
	
//	def IScope  scope_ActionMessageOutParameter_activityParam(ActionMessageOutParameter spec, EReference ref) {
//		val activity = (spec.eContainer as StartAction).activity;
//		if (activity != null) {
//			Scopes::scopeFor(activity.params.filter(typeof(ActivityOutParameter)))
//		} else {
//			IScope::NULLSCOPE
//
//		}
//	}

	/*def IScope scope_FunctionalityUsedPort_functionalityParam(FunctionalityUsedPort spec, EReference ref) {
		val functionality = (spec.eContainer as ProvidedFunctionality).functionality;
		if(functionality!=null)
		{
			val ParamList = new ArrayList<FunctionalityParam>();
			if (functionality.inputFunctionalityParam != null)
				ParamList.addAll(functionality.inputFunctionalityParam.inputParams);
			if (functionality.outputFunctionalityParam != null)
				ParamList.addAll(functionality.outputFunctionalityParam.outputParams);
			Scopes::scopeFor(ParamList)
		}
		else {
			IScope::NULLSCOPE
		}
	}*/

//	def IScope scope_PrimaryKeyProperty_member(PrimaryKeyProperty key, EReference ref) {
//		val baseType = (key.eContainer.eContainer as Message).mt;
//		if (baseType != null) {
//			Scopes::scopeFor(baseType.member.filter(typeof(StructBasicMember)));
//		} else {
//			IScope::NULLSCOPE
//		}
//	}
	
//	def IScope scope_RangeProperty_member(RangeProperty key, EReference ref) {
//		val baseType = (key.eContainer.eContainer as Message).mt;
//		if (baseType != null) {
//			Scopes::scopeFor(baseType.member.filter(typeof(StructBasicMember)));
//		} else {
//			IScope::NULLSCOPE
//		}
//	}
	
//	def IScope scope_UnitProperty_member(UnitProperty key, EReference ref) {
//		val baseType = (key.eContainer.eContainer as Message).mt;
//		if (baseType != null) {
//			Scopes::scopeFor(baseType.member.filter(typeof(StructBasicMember)));
//		} else {
//			IScope::NULLSCOPE
//		}
//	}
	
	
//	FunctionalityFromRefExpression:
//	from = [Functionality]'.'fromPort = [FunctionalityParam]
//;
//
//FunctionalityToRefExpression:
// 'to' To = [Functionality]'.'toPort = [FunctionalityParam]
//;

//    def IScope scope_FunctionalityFromRefExpression_fromPort(FunctionalityFromRefExpression part, EReference ref) 
//    {
//    	val participant = part.from;
//		if (participant != null && participant.outputFunctionalityParam!=null ) {
//			Scopes::scopeFor(participant.outputFunctionalityParam.outputParams)
//		} else
//			IScope::NULLSCOPE
//    }
//    
//    
//    def IScope scope_FunctionalityToRefExpression_toPort(FunctionalityToRefExpression part, EReference ref) 
//    {
//    	val participant = part.to;
//		if (participant != null  && participant.inputFunctionalityParam!=null ) {
//			Scopes::scopeFor(participant.inputFunctionalityParam.inputParams)
//		} else
//			IScope::NULLSCOPE
//    }
//    

	

// 	def IScope scope_Messages_dt(Messages messages, EReference eref) { 
// 		for (AbstractElement i : ((messages.eContainer as DomainModel).elements)) {
// 			if (i.class == typeof(MessagesImpl)) {
// 				
// 			}
// 		}
// 		Scopes::scopeFor((messages.eContainer as DomainModel).elements.filter[ ((typeof(MessagesImpl) == true) as MessagesImpl).getDt() ])
// 	}
}
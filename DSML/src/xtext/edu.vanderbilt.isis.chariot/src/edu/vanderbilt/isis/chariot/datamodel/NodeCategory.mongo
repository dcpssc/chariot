import org.bson.types.ObjectId
import edu.vanderbilt.isis.chariot.datamodel.MemoryUnit
import edu.vanderbilt.isis.chariot.datamodel.StorageUnit
import edu.vanderbilt.isis.chariot.datamodel.SupportedOS
import edu.vanderbilt.isis.chariot.datamodel.SupportedMiddleware
import com.mongodb.DB
import com.mongodb.DBObject
import com.mongodb.DBCollection
import edu.vanderbilt.isis.chariot.datamodel.Status
import edu.vanderbilt.isis.chariot.generator.ConfigSpaceGenerator

package edu.vanderbilt.isis.chariot.datamodel.NodeCategory {
	DM_NodeCategory {
		ObjectId _id
		String name
		DM_NodeTemplate* nodeTemplates
		
		/*
		 * 
		 */
		void init () {
			this.name = new String()
			this.getNodeTemplates()	// This initializes nodeTemplates.
		}
		
		/*
		 * 
		 */
		void addNodeTemplate ((DM_NodeTemplate)=>void initializer) {
			val DM_NodeTemplate nodeTemplateToAdd = new DM_NodeTemplate => initializer
			this.nodeTemplates.add (nodeTemplateToAdd)
		}
		
		/*
		 * Insert new NodeCategory to 'NodeCategories' collection 
		 * of the given database. Check if NodeCategory already 
		 * exists using category name.
		 * 
		 * @param database - Name of the database.
		 */
		void insert (DB database) {
			val dbCollection = database.getCollection('NodeCategories')

			// Check if already exists. Store only if no existing
			// node category has the same name.
			val result = dbCollection.findOne((new DM_NodeCategory => [
				name = this.name
			]).getDbObject())
				
			if (result == null) {
				dbCollection.save(this.getDbObject())
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" node category added to database")
			}
			else {
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" node category already exists. Trying to update.")
					
				this.update(result, dbCollection)
			}
		}
		
		/*
		 * Update existing NodeCategory in 'NodeCategories' collection
		 * of the given database.
		 * 
		 * @param database - Name of the database.
		 */
		 void update (DBObject objectToUpdate, DBCollection targetCollection) {
		 	// Delete existing object and save current version.
		 	targetCollection.remove(objectToUpdate)
		 	targetCollection.save(this.getDbObject())
		 	
		 	ConfigSpaceGenerator.LOGGER.info (this.name + 
				" node category has been updated.")
		 }
		 
		 /*
		 * Remove node from an existing node category.
		 * 
		 * @param nodeName - Name of node to be removed.
		 */
		 void removeNodeTemplate (String nodeTemplateName) {
		 	var int index = -1;
		 	var int count = 0;
		 	for (DM_NodeTemplate nodeTemplate: this.getNodeTemplates()) {
		 		if (nodeTemplate.name.equals (nodeTemplateName))
		 			index = count
		 		count++
		 	}
		 	
		 	if (index != -1)
		 	{
		 		this.nodeTemplates.remove (index)
		 		ConfigSpaceGenerator.LOGGER.info (nodeTemplateName + 
		 			" node template removed from node category " + this.name)
		 	}
		 	else
		 		ConfigSpaceGenerator.LOGGER.info (nodeTemplateName + 
		 			" node template does not exist in node category " + this.name)
		 }
	}
	
	DM_NodeTemplate {
		String name
		
		DM_Memory {
			int memory
			String unit
			
			/*
			 * 
			 */
			void setUnit (MemoryUnit unit) {
				this.unit = unit.toString()
			}
		} availableMemory

		DM_Storage {
			int storage
			String unit
			
			/*
			 * 
			 */
			void setUnit (StorageUnit unit) {
				this.unit = unit.toString()
			}
		} availableStorage

		String OS
		String middleware
		DM_Artifact* artifacts
		DM_Device* devices
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.availableMemory = new DM_Memory() => [
				setMemory (0)
				setUnit ("")
			]
			this.availableStorage = new DM_Storage() => [
				setStorage (0)
				setUnit ("")
			]
			this.OS = new String()
			this.middleware = new String()
			this.getArtifacts	// This initializes the artifacts list.
			this.getDevices		// This initializes the devices list.
		}
		
		/*
		 * 
		 */
		void setAvailableMemory ((DM_Memory)=>void initializer) {
			this.availableMemory = new DM_Memory => initializer
		} 
		
		/*
		 * 
		 */
		void setAvailableStorage ((DM_Storage)=>void initializer) {
			this.availableStorage = new DM_Storage => initializer
		}
		
		/*
		 * 
		 */
		void setOS (SupportedOS os) {
			this.OS = os.toString()
		}
		
		/*
		 * 
		 */
		void setMiddleware (SupportedMiddleware middleware) {
			this.middleware = middleware.toString()
		}
		
		/*
		 * 
		 */
		void addArtifact ((DM_Artifact)=>void initializer) {
			val DM_Artifact artifactToAdd = new DM_Artifact => initializer
			this.artifacts.add (artifactToAdd)
		}
		
		/*
		 * 
		 */
		void addDevice ((DM_Device)=>void initializer) {
			val DM_Device deviceToAdd = new DM_Device => initializer
			this.devices.add (deviceToAdd)
		}
	}
	
	DM_Artifact {
		String name
		String location
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.location = new String()
		}
	}
	
	DM_Device {
		String name
		DM_Artifact* artifacts
		String status
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.getArtifacts()	// This initializes artifacts
			this.status = new String()
		}

		/*
		 * 
		 */
		void addArtifact ((DM_Artifact)=>void initializer) {
			val DM_Artifact artifactToAdd = new DM_Artifact => initializer
			this.artifacts.add (artifactToAdd)
		}
		
		/*
		 * 
		 */
		void setStatus(Status status) {
			this.status = status.toString()
		}
	}
}
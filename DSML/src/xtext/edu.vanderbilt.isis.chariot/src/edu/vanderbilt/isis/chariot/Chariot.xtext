grammar edu.vanderbilt.isis.chariot.Chariot with org.eclipse.xtext.common.Terminals

//org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.vanderbilt.edu/isis/chariot/Datatypes" as ChariotMessage
generate chariot "http://www.vanderbilt.edu/isis/chariot/Chariot"

/*
 * Entry/start rule that supports one or more imports as well
 * as package declaration.
 */
DomainModel:
	(imports += Import)*
	package = PackageDeclaration;
	
/*
 * Rules that allows importing of elements from different files.
 */
Import:
  'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
  QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;

/*
 * Rule to support JAVA style package declaration. This rule also
 * allows creation of AbstractElements inside a package.
 */
PackageDeclaration:
	'package' name = QualifiedName '{'
		(elements += AbstractElement)*
	'}'; 

/*
 * Rule that allows creation of different first class entities.
 */
AbstractElement:
		Functionality
	| 	Composition
	| 	Component
	| 	NodesCategory
	| 	SystemDescription;

/*
 * Rule that allows creation of a functionality, which can have
 * input and output params.
 */
Functionality:
	'functionality' name = ID '{'
		inputFunctionalityParam = FunctionalityInputParams?
		outputFunctionalityParam = FunctionalityOutputParams?
	'}';

/*
 * Rule to create input parameters for a functionality.
 * 
 * NOTE: atleast imposition disabled for now.
 */
FunctionalityInputParams:
	('input' inputParams += FunctionalityParam
		(',' inputParams += FunctionalityParam)*); //('atleast' minrequirement = INT)?);

/*
 * Rule to create output parameters for a functionality.
 */
FunctionalityOutputParams:
	('output' outputParams += FunctionalityParam
	(',' outputParams += FunctionalityParam)*);

/*
 * Rule to create a functionality parameter.
 */
FunctionalityParam:
	name = ID;

/*
 * Rule to create a composition which is a collection of
 * connections between functionalities.
 */
Composition:
	'composition' name = ID '{'
		functionedges += FunctionalityConnection+
	'}';

/*
 * Rule to create connection between functionality parameters.
 */
FunctionalityConnection:
	fromPort = [FunctionalityParam|QualifiedName] 'to' 
		toPort = [FunctionalityParam|QualifiedName];

/*
 * Rule to create a component.
 */
Component:
		ExternalComponent
	|	ChariotComponent
	|	VoterServiceComponent
	|	ConsensusServiceComponent;
	
/*
 * Rule to create an external component.
 */
ExternalComponent:
	(hardwareComponent ?= 'hardware')? 'externalComponent' name = ID '{'
		(parts += ExternalComponentPart)*
	'}';
	
/*
 * Rule to create a chariot component.
 */
ChariotComponent:
	'chariotComponent' name = ID '{'
		(parts += ChariotComponentPart)*
	'}';
	
/*
 * Rule to create a voter service.
 */
VoterServiceComponent:
	'voterComponent' name = ID '{'
		(parts += ServiceComponentPart)*
	'}';
	
/*
 * Rule to create a consensus service.
 */
ConsensusServiceComponent:
	'consensusComponent' name = ID '{'
		(parts += ServiceComponentPart)*
	'}';

/*
 * Rule that allows creation of different parts for an external
 * component.
 */
ExternalComponentPart:
		ExternalFunctionalityProvision
	| 	StartScript
	| 	StopScript
	| 	ComponentPeriod
	| 	ComponentDeadline
	|	AbstractRequirement;

/*
 * Rule to declare a functionality provided by an external component. 
 * As part of this rule, we can also assign message type to different
 * functionality parameters.
 */
ExternalFunctionalityProvision:
	'provides' functionality = [Functionality|QualifiedName] '{'
		(messageAssignments += MessageAssignment)+
	'}';

/*
 * Rule to assign a message type to a functionality parameter.
 */
MessageAssignment:
	message = [ChariotMessage::Message|QualifiedName] 'as' 
		functionalityParam=[FunctionalityParam|QualifiedName];

/*
 * Rule to declare start script. This script will be used to launch
 * the associated external component.
 */	
StartScript:
	'startScript' script = STRING;

/*
 * Rule to declare stop script. This script will be used to stop the
 * associated external component.
 */
StopScript:
	'stopScript' script = STRING;

/*
 * Rule to declare period for an external components
 */
ComponentPeriod:
	'period' period = FLOATING_PT_LITERAL unit = TimeUnit;

/*
 * Rule to declare deadline for an external component.
 */
ComponentDeadline:
	'deadline' deadline = FLOATING_PT_LITERAL unit = TimeUnit;

/*
 * Rule that defines different supported time units.
 */
TimeUnit:
		months ?= 'months'
	|	days ?= 'days'
	|	seconds ?= 'seconds'
	|	milliseconds ?= 'milliseconds'
	|	microseconds ?= 'microseconds';

/*
 * Rule to create different resource requirements for an external
 * component.
 */
AbstractRequirement:
		ArtifactRequirement
	|	DeviceRequirement 
	|	MemoryRequirement 
	| 	StorageRequirement 
	| 	OSRequirement 
	| 	MiddlewareRequirement;

/*
 * Rule to specify artifact requirement.
 */
ArtifactRequirement:
	'requires' artifact = [Artifact|QualifiedName] 'artifact';

/*
 * Rule to specify device requirement.
 */
DeviceRequirement:
	'requires' device = [DeviceSupported|QualifiedName] 'device';

/*
 * Rule to specify memory requirement.
 */
MemoryRequirement:
	'requires' memory = INT unit = MemoryUnits 'memory';

/*
 * Rule that defines different supported memory units. 
 */
MemoryUnits:
		kb?='KB' 
	| 	mb?='MB' 
	| 	gb?="GB";

/*
 * Rule to specify storage requirement.
 */
StorageRequirement:
	'requires' storage = INT unit = MemoryUnits 'storage';

/*
 * Rule to specify operating system requirement.
 */
OSRequirement:
	'requires' (linux ?= 'Linux' | android ?= 'Android');

/*
 * Rule to specify middleware requirement.
 */
MiddlewareRequirement:
	'requires' (alljoyn?='AllJoyn' | rtidds?='RTIDDS' | lcm?= 'LCM');
	
/*
 * Rule that allows creation of different parts for an external
 * component.
 */
ChariotComponentPart:
		Port
	|	FunctionalityProvision
	|	StateVariable
	|	CustomStateVariable
	|	ExecutionLogic
	|	AbstractRequirement;
	
/*
 * Rule that allows creation of interaction ports. There are
 * four different kinds of ports currently supported.
 */
Port:
		PullInPort
	|	PushInPort
	|	PullOutPort
	| 	PushOutPort;
	
/*
 * Rule that allows creation of a pull-in port. This kind of
 * port is useful for modeling client side of a request/response
 * interaction.
 */
PullInPort:
	'pullInPort' name = ID messageType = [ChariotMessage::Message|QualifiedName] ('{'
		'timeout' timeout = INT unit = TimeUnit
	'}')?;

/*
 * Rule that allows creation of a push-in port. This kind of
 * port is useful for modeling a message listener and therefore
 * can be used to model the sink/destination of an event 
 * (message) driven interaction.
 */
PushInPort:
	'pushInPort' name = ID messageType = [ChariotMessage::Message|QualifiedName] ('[' buffersize = INT ']')?;
	
/*
 * Rule that allows creation of a pull-out port. This kind of
 * port is useful for modeling server side of a request/response
 * interaction.
 */
PullOutPort:
	'pullOutPort' name = ID messageType = [ChariotMessage::Message|QualifiedName];
	
/*
 * Rule that allows creation of a push-out port. This kind of
 * port is useful for modeling message sender and therefore can
 * be used to model the source of an event (message) driven 
 * interaction.
 */
PushOutPort:
	'pushOutPort' name = ID messageType = [ChariotMessage::Message|QualifiedName];	
	
/*
 * Rule to specify functionality provided by a chariot component.
 * This involves modeling port-to-functionality parameter mapping.
 */
FunctionalityProvision:
	'provides' functionality = [Functionality|QualifiedName] '{'
  		(portAssignments += PortAssignment)+ 
  	'}';
  
/*
 * Rule to specify a port-to-functionality parameter mapping.
 */
PortAssignment:
  port=[Port|QualifiedName] 'as' functionalityParam=[FunctionalityParam|QualifiedName];
  
/*
 * Rule to specify a state variable.
 */
StateVariable:
	'stateVar' type = STRING 'as' name = ID;
	
/*
 * Rule to specify a custom state variable that used chariot
 * data type.
 */
CustomStateVariable:
	'stateVar' type = [ChariotMessage::Message|QualifiedName] 'as' name = ID;
	
/*
 * Rule to specify execution logic of a chariot component. An
 * execution logic has an associated trigger, run block (actual
 * business logic), and deadline.
 */
ExecutionLogic:
	trigger = ExecutionTrigger
	runOperation = ExecutionRunOperation
	(deadline = ComponentDeadline)?;

/*
 * Rule to specify a trigger. They are of two kinds - periodic
 * and sporadic. Periodic triggers are fired based on pre-defined
 * periodicity. Sporadic triggers are fired based on external
 * events, such as, arrival of a message in one or more ports.
 */
ExecutionTrigger:
		PeriodicTrigger
	|	SporadicTrigger;
	
/*
 * Rule that allows creation of a periodic trigger. This
 * requires specification of the association period.
 */
PeriodicTrigger:
	'periodicTrigger' '@' period = INT unit = TimeUnit;
	
/*
 * Rule that allows creation of a sporadic trigger. This
 * requires specification of a message port at which messages
 * are expected.
 */
SporadicTrigger:
	'sporadicTrigger' 'for' 'port' port =  [Port];

/*
 * Rule to specify the actual business logic.
 */
ExecutionRunOperation:
	//'run'  body = XBlockExpression;
	'run' '{' body = STRING '}';

/*
 * Rule that allows creation of different parts for a service
 * component.
 */
ServiceComponentPart:
		Port
	| 	ExecutionLogic
	|	AbstractRequirement;

/*
 * Rule to create a node category, which only has a name.
 */
NodesCategory:
	'nodeCategory' name = ID '{'
		(nodeTemplates += NodeTemplate)+
	'}';
	
/*
 * Rule to create a node template.
 */
NodeTemplate:
	'nodeTemplate' name = ID '{' 
		(nodeTemplateInfo += NodeTemplateInfo)* 
	'}';
	
/*
 * Rule to create different entities that comprises a 
 * node template.
 */
NodeTemplateInfo:
		DeviceSupported
	|	Artifact
	|	MemoryProvision
	|	StorageProvision
	|	OSSupported
	|	Middleware
	|	NodeCategoryLabel;

/*
 * Rule to create a device supported by a node template.
 * For a device, this rule also allows specification of
 * device reliability, lifetime, and device specific artifacts.
 */
DeviceSupported:
	'device' name = ID ('{'
		(artifacts += DeviceArtifact)*
	'}') ;

/*
 * Rule to create device specific artifact.
 */
DeviceArtifact:
	'artifact' (jar ?= 'jar' | sharedObject ?= 'sharedObject') name = ID  '{'
		'location' location = STRING
	'}';
	
/*
 * Rule to create (software) artifact associated with a
 * node template.
 * 
 * NOTE: Artifact differs from DeviceArtifact as the latter 
 * cannot be referenced as a requirement by a component. A 
 * component can require Artifact and Device.
 */
Artifact:
	'artifact' (jar?='jar' | sharedObject?='sharedObject') name = ID  '{'
		'location' location = STRING
	'}';
	
/*
 * Rule to specify memory provision.
 */
MemoryProvision:
	'memory' memory = INT unit = MemoryUnits;
	
/*
 * Rule to specify storage provision.
 */
StorageProvision:
	'storage' storage = INT unit = MemoryUnits;
	
/*
 * Rule to specify operating system associated with a
 * node template. Currently supported OSs: Linux, Android.
 */
OSSupported:
	'os' (linux ?= 'Linux' | android ?= 'Android');

/*
 * Rule to specify middleware assocaited with a node template.
 * Currently supported middleware: AllJoyn, RTI-DDS, LCM. 
 */
Middleware :
  'middleware' middleware+=MiddlewareChoice (',' middleware+=MiddlewareChoice )*;
  
/*
 * Rule that lists different supported middleware.
 */
MiddlewareChoice:
		alljoyn?='AllJoyn' 
	|   rtidds?='RTI-DDS' 
  	|  	lcm?= 'LCM';

/*
 * Rule to associate a node template with existing nodes category.
 */
NodeCategoryLabel:
	'category' label += [NodesCategory|QualifiedName] 
		(',' label += [NodesCategory|QualifiedName])*;
	
/*
 * Rule to create a system description, which comprises nodes and
 * required objectives. It can also contain a reliability threshold
 * and one or more constraints. Explicit initial configuration not 
 * supported currently, but will be supported in later versions of 
 * CHARIOT.
 */
SystemDescription:
	'system' name = ID '{'
	 	(requiredobjectives += SystemObjective)+
		(constraints += SystemConstraint)* //(initialConfiguration = InitialConfiguration)? 
	'}';

/*
 * Rule to specify required (system) objectives. An objective
 * can have constraints using which its one or more constituent 
 * functionalities can be assigned to each node of certain category.
 */
SystemObjective:
	composition = [Composition|QualifiedName] 'as' 
		('objective') name = ID;

/*
 * Rule to create system constraints. Currently these are
 * replication constraints. Could be expanded to cover other
 * constraints (e.g. node collocation).
 */
SystemConstraint:
		PerNodeReplicationConstraint
	|	ConsensusReplicationConstraint
	|	ActiveReplicationConstraint
	|	VoterReplicationConstraint;
	
/*
 * 
 */
PerNodeReplicationConstraint:
	'replicate' functionality = [Functionality|QualifiedName] 'asPerNode'
		'for' 'category' categories += [NodesCategory|QualifiedName] 
			(',' categories += [NodesCategory|QualifiedName])*;

/*
 * Rule to create range associated with resilience constraints.
 */
ResilienceRange:
	('[' lower = (INT) ',' upper = (INT) ']') | (exact = INT);

/*
 * Rule to create consensus replication constraint.
 */
ConsensusReplicationConstraint:
	'replicate' functionality = [Functionality|QualifiedName] 'asConsensusCluster' 
		'with' range = ResilienceRange 'instances' 
		'and' serviceComponent = [ConsensusServiceComponent|QualifiedName];

/*
 * Rule to create active replication (no consensus) constraint.
 */
ActiveReplicationConstraint:
	'replicate' functionality = [Functionality|QualifiedName] 'asCluster'
		'with' range=ResilienceRange 'instances';

/*
 * Rule to create voter replication constraint.
 */
VoterReplicationConstraint:
	'replicate' functionality = [Functionality|QualifiedName] 'asVoterCluster' 
		'with' range=ResilienceRange 'instances' 
		'and' serviceComponent = [VoterServiceComponent|QualifiedName];
	
/*
 * Terminal rules.
 */
SIGNED_INTEGER returns ecore::EInt:
	('+' | '-') (INT);
FLOATING_PT_LITERAL returns ecore::EDouble:
	(INT|SIGNED_INTEGER) ('.' (INT))?;
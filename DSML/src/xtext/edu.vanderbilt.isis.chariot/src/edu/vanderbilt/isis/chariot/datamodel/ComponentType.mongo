import org.bson.types.ObjectId
import edu.vanderbilt.isis.chariot.datamodel.SupportedOS
import edu.vanderbilt.isis.chariot.datamodel.SupportedMiddleware
import java.util.List
import com.mongodb.DB
import java.util.ArrayList
import com.mongodb.DBObject
import com.mongodb.DBCollection
import java.util.logging.Logger
import edu.vanderbilt.isis.chariot.datamodel.NodeCategory.DM_Memory
import edu.vanderbilt.isis.chariot.datamodel.NodeCategory.DM_Storage
import edu.vanderbilt.isis.chariot.datamodel.SystemDescription.DM_Time

package edu.vanderbilt.isis.chariot.datamodel.ComponentType {
	DM_ComponentType {
		ObjectId _id
		String name
		String providedFunctionality
		DM_Memory memoryRequirement
		DM_Storage storageRequirement

		String osRequirement
		String middlewareRequirement
		List<String> artifactRequirements
		List<String> deviceRequirements
		
		// Start and stop scripts are only relevant for external 
		// components.
		String startScript
		String stopScript
		
		// Period and deadline.
		DM_Time period
		DM_Time  deadline
		
		/*
		 * 
		 */
		void init () {
			this.name = new String()
			this.providedFunctionality = new String()
			this.memoryRequirement = new DM_Memory => [
				setMemory (0)
				setUnit ("")
			]
			this.storageRequirement = new DM_Storage => [
				setStorage (0)
				setUnit ("")
			]			
			this.osRequirement = new String()
			this.middlewareRequirement = new String()
			this.artifactRequirements = new ArrayList<String>()
			this.deviceRequirements = new ArrayList<String>()
			this.startScript = new String()
			this.stopScript = new String()
			this.period = new DM_Time () => [
				setTime (0.0)
				setUnit ("")
			]
			this.deadline = new DM_Time () => [
				setTime (0.0)
				setUnit ("")
			]
		}
		
		/*
		 * 
		 */
		void setMemoryRequirement ((DM_Memory)=>void initializer) {
			this.memoryRequirement = new DM_Memory => initializer
		}
		
		/*
		 * 
		 */
		void setStorageRequirement ((DM_Storage)=>void initializer) {
			this.storageRequirement = new DM_Storage => initializer
		}
		
		/*
		 * 
		 */
		void setOSRequirement (SupportedOS os) {
			this.setOsRequirement (os.toString())
		}
		
		/*
		 * 
		 */
		void setMiddlewareRequirement (SupportedMiddleware  middleware) {
			this.setMiddlewareRequirement (middleware.toString())
		}
		
		/*
		 * 
		 */
		void addArtifactRequirement (String artifact) {
			val LOGGER = Logger.getLogger("DM_ComponentType")
			if (this.artifactRequirements == null)
				this.artifactRequirements = new ArrayList<String>()
				
			if (!this.artifactRequirements.contains(artifact))
				this.artifactRequirements.add (artifact)
			else
				LOGGER.info (artifact + 
					" artifact already exists in component " + this.name)
		}
		
		/*
		 * 
		 */
		void addDeviceRequirement (String device) {
			val LOGGER = Logger.getLogger("DM_ComponentType")
			if (this.deviceRequirements == null)
				this.deviceRequirements = new ArrayList<String>()
				
			if (!this.deviceRequirements.contains(device))
				this.deviceRequirements.add (device)
			else
				LOGGER.info (device + 
					" device already exists in component " + this.name)
		}
		
		/*
		 * 
		 */
		void setPeriod ((DM_Time)=>void initializer) {
			this.period = new DM_Time => initializer
		}
		
		/*
		 * 
		 */
		void setDeadline ((DM_Time)=>void initializer) {
			this.deadline = new DM_Time => initializer
		}
		
		/*
		 * 
		 */
		void insert (DB database) {
			val LOGGER = Logger.getLogger("DM_ComponentType")
			
			val dbCollection = database.getCollection('ComponentTypes')

			// Check if already exists. Store only if no existing
			// component type has the same name.
			val result = dbCollection.findOne((new DM_ComponentType => [
				name = this.name
			]).getDbObject())
				
			if (result == null) {
				dbCollection.save(this.getDbObject())
				LOGGER.info (this.name + 
					" component type added to database")
			}
			else {
				LOGGER.info (this.name + 
					" component type already exists. Trying to update")
					
				this.update(result, dbCollection)
			}
		}
		
		/*
		 *
		 */
		 void update (DBObject objectToUpdate, DBCollection targetCollection) {
		 	val LOGGER = Logger.getLogger("DM_ComponentType")
		 	
		 	// Delete existing object and save current version.
		 	targetCollection.remove(objectToUpdate)
		 	targetCollection.save(this.getDbObject())
		 	
		 	LOGGER.info (this.name + 
				" component type has been updated.")
		 }
	}
}
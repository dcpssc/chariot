import org.bson.types.ObjectId
import java.util.List
import com.mongodb.DB
import java.util.ArrayList
import com.mongodb.DBObject
import com.mongodb.DBCollection
import edu.vanderbilt.isis.chariot.datamodel.ReplicationConstraintKind
import edu.vanderbilt.isis.chariot.generator.ConfigSpaceGenerator

package edu.vanderbilt.isis.chariot.datamodel.GoalDescription {
	/**
	 * An entity to store goal description.
	 */
	DM_GoalDescription {
		ObjectId _id
		String name
		DM_ReplicationConstraint* replicationConstraints
		DM_Objective* objectives
		
		/**
		 * Initialization method.
		 */
		void init() {
			this.name = new String()
			this.getReplicationConstraints()	// This initializes constraints.
			this.getObjectives()				// This initializes objectives.
		}
		
		/**
		 * Method to add a replication constraint.
		 * 
		 * @param initializer	DM_ReplicationConstraint entity to be added.
		 */
		void addReplicationConstraint ((DM_ReplicationConstraint)=>void initializer) {
			val DM_ReplicationConstraint constraintToAdd = 
				new DM_ReplicationConstraint => initializer
			
			val List<String> curConstraintKinds = 
				this.replicationConstraints.map[kind]
			val List<String> curConstraintFunctionalities = 
				this.replicationConstraints.map[functionality]
			
			if (!curConstraintKinds.contains(constraintToAdd.getKind()) &&
				!curConstraintFunctionalities.contains(constraintToAdd.getFunctionality()))
				this.replicationConstraints.add (constraintToAdd)
			else
				ConfigSpaceGenerator.LOGGER.info(constraintToAdd.getKind() + " replication 
					constraint for functionality " + constraintToAdd.getFunctionality() + 
					" already exists in goal " + this.name)
		}
		
		/**
		 * Method to add an objective.
		 * 
		 * @param initializer	DM_Objective entity to be added.
		 */
		void addObjective ((DM_Objective)=>void initializer) {
			val DM_Objective objectiveToAdd = new DM_Objective => initializer
			
			val List<String> curObjectives = this.objectives.map[name]
			
			if (!curObjectives.contains (objectiveToAdd.getName()))
				this.objectives.add(objectiveToAdd)
			else
				ConfigSpaceGenerator.LOGGER.info (objectiveToAdd.getName() + 
					" objective already exists in goal " + this.name)
		}
		
		/**
		 * Method to insert a goal description entity into a database.
		 * 
		 * @param database	Database where the goal description entity should 
		 * 					be inserted.
		 */
		void insert (DB database) {			
			val dbCollection = database.getCollection('GoalDescriptions')

			// Check if already exists in database. Store only if no existing
			// goal has the same name.
			val result = dbCollection.findOne((new DM_GoalDescription => [
				name = this.name
			]).getDbObject())
				
			if (result == null) {
				dbCollection.save(this.getDbObject())
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" goal description added to database")
			}
			else {
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" goal description type already exists")
					
				this.update(result, dbCollection)
			}
		}
		
		/**
		 * Method to update an existing goal description entity.
		 * 
		 * @param objectToUpdate	Goal description entity to update.
		 * @param targetCollection	Collection where the goal description entity
		 * 							is located in the database.
		 */
		 void update (DBObject objectToUpdate, DBCollection targetCollection) {		 	
		 	// NOTE: Naive update where we replace (remove old and store new)
		 	// exiting entity.
		 	
		 	targetCollection.remove(objectToUpdate)
		 	targetCollection.save(this.getDbObject())
		 	
		 	ConfigSpaceGenerator.LOGGER.info (this.name + 
				" goal has been updated.")
		 }
	} 
	
	/**
	 * An entity to store replication constraint.
	 */
	DM_ReplicationConstraint {
		String kind
		String functionality
		int maxInstances
		int minInstances
		int numInstances
		String serviceComponentType
		List<String> nodeCategories
		
		/**
		 * Initialization method.
		 */
		void init() {
			this.kind = new String()
			this.functionality = new String()
			this.maxInstances = 0
			this.minInstances = 0
			this.numInstances = 0
			this.serviceComponentType = new String() 
			this.nodeCategories = new ArrayList<String>()
		}
		
		/**
		 * Method to set constraint kind.
		 * 
		 * @param kind	Constraint kind.
		 */
		void setKind (ReplicationConstraintKind kind) {
			this.kind = kind.toString()
		}
		
		/**
		 * Method to add a node category.
		 * 
		 * @param nodeCategory	Node category to add.
		 */
		void addNodeCategory(String nodeCategory) {			
			if (!this.nodeCategories.contains(nodeCategory))
				this.nodeCategories.add(nodeCategory)
			else
				ConfigSpaceGenerator.LOGGER.info (nodeCategory + 
					" node category already exists")
		}
	}
	
	/**
	 * An entity to store objective.
	 */
	DM_Objective {
		String name
		DM_Functionality* functionalities
		
		/**
		 * Initialization method. 
		 */
		void init() {
			this.name = new String()
			this.getFunctionalities()	// This initializes functionalities.
		}
		
		/**
		 * Method to add functionality.
		 * 
		 * @param initializer	DM_Functionality entity to be added.
		 */
		void addFunctionality ((DM_Functionality)=>void initializer) {
			val DM_Functionality functionalityToAdd = 
				new DM_Functionality => initializer
			this.functionalities.add(functionalityToAdd)
		}
	}
	
	/**
	 * An entity to store functionality.
	 */
	DM_Functionality {
		String name
		List<String> dependsOn
		
		/**
		 * Initialization method.
		 */
		void init() {
			this.name = new String()
			this.dependsOn = new ArrayList<String>()
		}
		
		/**
		 * Method to add functionality dependency.
		 * 
		 * @param dependsOn	Name of the functionality on which this
		 * 					functionality depends on.
		 */
		void addDependsOn (String dependsOn) {			
			if (!this.dependsOn.contains(dependsOn))
				this.dependsOn.add(dependsOn)
			else
				ConfigSpaceGenerator.LOGGER.info (dependsOn + 
					" functionality already exists as dependency for functionality " + this.name)
		}
	}
}
import org.bson.types.ObjectId
import java.util.List
import com.mongodb.DB
import java.util.ArrayList
import com.mongodb.DBObject
import com.mongodb.DBCollection
import edu.vanderbilt.isis.chariot.datamodel.ReplicationConstraintKind
import edu.vanderbilt.isis.chariot.generator.ConfigSpaceGenerator

package edu.vanderbilt.isis.chariot.datamodel.GoalDescription {
	DM_GoalDescription {
		ObjectId _id
		String name
		DM_ReplicationConstraint* replicationConstraints
		DM_Objective* objectives
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.getReplicationConstraints()	// This initializes constraints.
			this.getObjectives()				// This initializes objectives.
		}
		
		/*
		 * 
		 */
		void addReplicationConstraint ((DM_ReplicationConstraint)=>void initializer) {
			val DM_ReplicationConstraint constraintToAdd = new DM_ReplicationConstraint => initializer
			this.replicationConstraints.add (constraintToAdd)
		}
		
		/*
		 * 
		 */
		void addObjective ((DM_Objective)=>void initializer) {
			val DM_Objective objectiveToAdd = new DM_Objective => initializer
			this.objectives.add(objectiveToAdd)
			
			/* FOLLOWING PATTERN OF CODE CAN BE USED TO CHECK FOR DUPLICATES */
			/*val List<String> tmp = this.objectives.map[name]
			if (!tmp.contains (objectiveToAdd.name))
				this.objectives += objectiveToAdd
			else
				LOGGER.info (objectiveToAdd.getName() + 
					" objective already exists in goal " + this.name)*/
		}
		
		/*
		 * 
		 */
		void insert (DB database) {			
			val dbCollection = database.getCollection('GoalDescriptions')

			// Check if already exists. Store only if no existing
			// goal has the same name.
			val result = dbCollection.findOne((new DM_GoalDescription => [
				name = this.name
			]).getDbObject())
				
			if (result == null) {
				dbCollection.save(this.getDbObject())
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" goal description added to database")
			}
			else {
				ConfigSpaceGenerator.LOGGER.info (this.name + 
					" goal description type already exists")
					
				this.update(result, dbCollection)
			}
		}
		
		/*
		 * 
		 */
		 void update (DBObject objectToUpdate, DBCollection targetCollection) {		 	
		 	// Delete existing object and save current version.
		 	targetCollection.remove(objectToUpdate)
		 	targetCollection.save(this.getDbObject())
		 	
		 	ConfigSpaceGenerator.LOGGER.info (this.name + 
				" goal has been updated.")
		 }
	} 
	
	DM_ReplicationConstraint {
		String kind
		String functionality
		int maxInstances
		int minInstances
		int numInstances
		String serviceComponentType
		List<String> nodeCategories
		
		/*
		 * 
		 */
		void init() {
			this.kind = new String()
			this.functionality = new String()
			this.maxInstances = 0
			this.minInstances = 0
			this.numInstances = 0
			this.serviceComponentType = new String() 
			this.nodeCategories = new ArrayList<String>()
		}
		
		/*
		 * 
		 */
		void setKind (ReplicationConstraintKind kind) {
			this.kind = kind.toString()
		}
		
		/*
		 * 
		 */
		void addNodeCategory(String nodeCategory) {
			if (this.nodeCategories == null)
				this.nodeCategories = new ArrayList<String>
			
			if (!this.nodeCategories.contains(nodeCategory))
				this.nodeCategories.add(nodeCategory)
			else
				ConfigSpaceGenerator.LOGGER.info (nodeCategory + 
					" node category already exists")
		}
	}
	
	DM_Objective {
		String name
		DM_Functionality* functionalities
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.getFunctionalities()	// This initializes functionalities.
		}
		
		/*
		 * 
		 */
		void addFunctionality ((DM_Functionality)=>void initializer) {
			val DM_Functionality functionalityToAdd = new DM_Functionality => initializer
			this.functionalities.add(functionalityToAdd)
		}
	}
	
	DM_Functionality {
		String name
		List<String> dependsOn
		
		/*
		 * 
		 */
		void init() {
			this.name = new String()
			this.dependsOn = new ArrayList<String>()
		}
		
		/*
		 * 
		 */
		void addDependsOn (String dependsOn) {
			if (this.dependsOn == null)
				this.dependsOn = new ArrayList<String>
			
			if (!this.dependsOn.contains(dependsOn))
				this.dependsOn.add(dependsOn)
			else
				ConfigSpaceGenerator.LOGGER.info (dependsOn + 
					" functionality already exists as dependency for functionality " + this.name)
		}
	}
}